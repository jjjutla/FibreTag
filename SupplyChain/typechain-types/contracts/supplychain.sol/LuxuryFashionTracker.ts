/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LuxuryFashionTracker {
  export type ProductStruct = {
    description: string;
    materials: string;
    timestamp: BigNumberish;
    manufacturer: AddressLike;
    isVerified: boolean;
    isPurchased: boolean;
    currentOwner: AddressLike;
    transferHistory: AddressLike[];
    manufacturingStages: string[];
    stagesCompleted: boolean[];
  };

  export type ProductStructOutput = [
    description: string,
    materials: string,
    timestamp: bigint,
    manufacturer: string,
    isVerified: boolean,
    isPurchased: boolean,
    currentOwner: string,
    transferHistory: string[],
    manufacturingStages: string[],
    stagesCompleted: boolean[]
  ] & {
    description: string;
    materials: string;
    timestamp: bigint;
    manufacturer: string;
    isVerified: boolean;
    isPurchased: boolean;
    currentOwner: string;
    transferHistory: string[];
    manufacturingStages: string[];
    stagesCompleted: boolean[];
  };
}

export interface LuxuryFashionTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProduct"
      | "getManufacturingHistory"
      | "getProductDetails"
      | "getTransferHistory"
      | "manufacturers"
      | "owner"
      | "products"
      | "purchaseProduct"
      | "registerManufacturer"
      | "startManufacturingStage"
      | "transferProduct"
      | "verifyProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProduct",
    values: [BytesLike, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getManufacturingHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manufacturers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "products", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "purchaseProduct",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerManufacturer",
    values: [string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startManufacturingStage",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProduct",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProduct",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManufacturingHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manufacturers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerManufacturer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startManufacturingStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProduct",
    data: BytesLike
  ): Result;
}

export interface LuxuryFashionTracker extends BaseContract {
  connect(runner?: ContractRunner | null): LuxuryFashionTracker;
  waitForDeployment(): Promise<this>;

  interface: LuxuryFashionTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProduct: TypedContractMethod<
    [
      _productId: BytesLike,
      _description: string,
      _materials: string,
      _stages: string[]
    ],
    [void],
    "nonpayable"
  >;

  getManufacturingHistory: TypedContractMethod<
    [_productId: BytesLike],
    [string[]],
    "view"
  >;

  getProductDetails: TypedContractMethod<
    [_productId: BytesLike],
    [LuxuryFashionTracker.ProductStructOutput],
    "view"
  >;

  getTransferHistory: TypedContractMethod<
    [_productId: BytesLike],
    [string[]],
    "view"
  >;

  manufacturers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        name: string;
        manufacturerAddress: string;
        contactInfo: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  products: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, boolean, boolean, string] & {
        description: string;
        materials: string;
        timestamp: bigint;
        manufacturer: string;
        isVerified: boolean;
        isPurchased: boolean;
        currentOwner: string;
      }
    ],
    "view"
  >;

  purchaseProduct: TypedContractMethod<
    [_productId: BytesLike],
    [void],
    "nonpayable"
  >;

  registerManufacturer: TypedContractMethod<
    [_name: string, _manufacturerAddress: AddressLike, _contactInfo: string],
    [void],
    "nonpayable"
  >;

  startManufacturingStage: TypedContractMethod<
    [_productId: BytesLike, _stageIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferProduct: TypedContractMethod<
    [_productId: BytesLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyProduct: TypedContractMethod<
    [_productId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<
    [
      _productId: BytesLike,
      _description: string,
      _materials: string,
      _stages: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getManufacturingHistory"
  ): TypedContractMethod<[_productId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProductDetails"
  ): TypedContractMethod<
    [_productId: BytesLike],
    [LuxuryFashionTracker.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferHistory"
  ): TypedContractMethod<[_productId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "manufacturers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        name: string;
        manufacturerAddress: string;
        contactInfo: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, boolean, boolean, string] & {
        description: string;
        materials: string;
        timestamp: bigint;
        manufacturer: string;
        isVerified: boolean;
        isPurchased: boolean;
        currentOwner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseProduct"
  ): TypedContractMethod<[_productId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerManufacturer"
  ): TypedContractMethod<
    [_name: string, _manufacturerAddress: AddressLike, _contactInfo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startManufacturingStage"
  ): TypedContractMethod<
    [_productId: BytesLike, _stageIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferProduct"
  ): TypedContractMethod<
    [_productId: BytesLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProduct"
  ): TypedContractMethod<[_productId: BytesLike], [void], "nonpayable">;

  filters: {};
}
