/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SupplychainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeManufacturingStage"
      | "createProduct"
      | "finishManufacturing"
      | "getHistory"
      | "productCount"
      | "products"
      | "sellProduct"
      | "startManufacturingStage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeManufacturingStage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finishManufacturing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellProduct",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startManufacturingStage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeManufacturingStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishManufacturing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startManufacturingStage",
    data: BytesLike
  ): Result;
}

export interface Supplychain extends BaseContract {
  connect(runner?: ContractRunner | null): Supplychain;
  waitForDeployment(): Promise<this>;

  interface: SupplychainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeManufacturingStage: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProduct: TypedContractMethod<
    [_description: string],
    [bigint],
    "nonpayable"
  >;

  finishManufacturing: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHistory: TypedContractMethod<
    [_productId: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  productCount: TypedContractMethod<[], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        description: string;
        owner: string;
        stage: bigint;
      }
    ],
    "view"
  >;

  sellProduct: TypedContractMethod<
    [_productId: BigNumberish, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  startManufacturingStage: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeManufacturingStage"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<[_description: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "finishManufacturing"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHistory"
  ): TypedContractMethod<
    [_productId: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "productCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        description: string;
        owner: string;
        stage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellProduct"
  ): TypedContractMethod<
    [_productId: BigNumberish, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startManufacturingStage"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "nonpayable">;

  filters: {};
}
